/**
 * yingyinglicai.com Inc.
 * Copyright (c) 2013-2014 All Rights Reserved.
 */
 package com.onway.makeploy.common.dal.ibatis;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;

import com.onway.makeploy.common.dal.daointerface.AccountDAO;

import com.onway.makeploy.common.dal.dataobject.AccountDO;
import java.util.List;
import org.springframework.dao.DataAccessException;
import java.util.Map;
import java.util.HashMap;

/**
 * An ibatis based implementation of dao interface <tt>com.onway.makeploy.common.dal.daointerface.AccountDAO</tt>.
 *
 * This file is generated by <tt>onway-gen-dal</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>onway</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/makeploy_account.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>onway-gen-dal</tt> 
 * to generate this file.
 *
 * @author guangdong.li
 * @version $Id: IbatisAccountDAO.java,v 1.0 2013/10/29 07:34:20 guangdong.li Exp $
 */
public class IbatisAccountDAO extends SqlMapClientDaoSupport implements AccountDAO {
	/**
	 *  Query DB table <tt>makeploy_account</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from makeploy_account</tt>
	 *
	 *	@param userId
	 *	@param orderNo
	 *	@return List<AccountDO>
	 *	@throws DataAccessException
	 */	 
    public List<AccountDO> selectAccountInfoByUserIdAndorderNoOld(String userId, String orderNo) throws DataAccessException {

	Map<String,Object> param = new HashMap<String,Object>();

        param.put("userId", userId);
        param.put("orderNo", orderNo);

        return getSqlMapClientTemplate().queryForList("MS-ACCOUNT-SELECT-ACCOUNT-INFO-BY-USER-ID-ANDORDER-NO-OLD", param);

    }

	/**
	 *  Query DB table <tt>makeploy_account</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from makeploy_account</tt>
	 *
	 *	@param userId
	 *	@param orderNo
	 *	@param offent
	 *	@param limit
	 *	@return List<AccountDO>
	 *	@throws DataAccessException
	 */	 
    public List<AccountDO> selectAccountInfoByUserIdAndorderNo(String userId, String orderNo, Integer offent, Integer limit) throws DataAccessException {

	Map<String,Object> param = new HashMap<String,Object>();

        param.put("userId", userId);
        param.put("orderNo", orderNo);
        param.put("offent", offent);
        param.put("limit", limit);

        return getSqlMapClientTemplate().queryForList("MS-ACCOUNT-SELECT-ACCOUNT-INFO-BY-USER-ID-ANDORDER-NO", param);

    }

	/**
	 *  Query DB table <tt>makeploy_account</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from makeploy_account</tt>
	 *
	 *	@param userId
	 *	@return List<AccountDO>
	 *	@throws DataAccessException
	 */	 
    public List<AccountDO> selectShopOutMoneyInfo(String userId) throws DataAccessException {

	Map<String,Object> param = new HashMap<String,Object>();

        param.put("userId", userId);

        return getSqlMapClientTemplate().queryForList("MS-ACCOUNT-SELECT-SHOP-OUT-MONEY-INFO", param);

    }

	/**
	 *  Query DB table <tt>makeploy_account</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from makeploy_account</tt>
	 *
	 *	@param userId
	 *	@return List<AccountDO>
	 *	@throws DataAccessException
	 */	 
    public List<AccountDO> selectAccountInfoByUserId(String userId) throws DataAccessException {

	Map<String,Object> param = new HashMap<String,Object>();

        param.put("userId", userId);

        return getSqlMapClientTemplate().queryForList("MS-ACCOUNT-SELECT-ACCOUNT-INFO-BY-USER-ID", param);

    }

	/**
	 *  Update DB table <tt>makeploy_account</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update makeploy_account set SUB_TYPE=? where (ID = ?)</tt>
	 *
	 *	@param subType
	 *	@param id
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int updateStatus(String subType, int id) throws DataAccessException {
        Map<String,Object> param = new HashMap<String,Object>();

        param.put("subType", subType);
        param.put("id", new Integer(id));

        return getSqlMapClientTemplate().update("MS-ACCOUNT-UPDATE-STATUS", param);
    }

	/**
	 *  Update DB table <tt>makeploy_account</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update makeploy_account set SUB_TYPE=?, GMT_MODIFIED=CURRENT_TIMESTAMP where (ACCOUNT_NO = ?)</tt>
	 *
	 *	@param subType
	 *	@param accountNo
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int updateStatusByAccountNo(String subType, String accountNo) throws DataAccessException {
        Map<String,Object> param = new HashMap<String,Object>();

        param.put("subType", subType);
        param.put("accountNo", accountNo);

        return getSqlMapClientTemplate().update("MS-ACCOUNT-UPDATE-STATUS-BY-ACCOUNT-NO", param);
    }

	/**
	 *  Query DB table <tt>makeploy_account</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select count(1) from makeploy_account</tt>
	 *
	 *	@param userId
	 *	@param orderNo
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long count(String userId, String orderNo) throws DataAccessException {

	Map<String,Object> param = new HashMap<String,Object>();

        param.put("userId", userId);
        param.put("orderNo", orderNo);

	    Long retObj = (Long) getSqlMapClientTemplate().queryForObject("MS-ACCOUNT-COUNT", param);

		if (retObj == null) {
		    return 0;
		} else {
		    return retObj.longValue();
		}

    }

	/**
	 *  Query DB table <tt>makeploy_account</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select count(1) from makeploy_account</tt>
	 *
	 *	@param userId
	 *	@param accountNo
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long countAccountNo(String userId, String accountNo) throws DataAccessException {

	Map<String,Object> param = new HashMap<String,Object>();

        param.put("userId", userId);
        param.put("accountNo", accountNo);

	    Long retObj = (Long) getSqlMapClientTemplate().queryForObject("MS-ACCOUNT-COUNT-ACCOUNT-NO", param);

		if (retObj == null) {
		    return 0;
		} else {
		    return retObj.longValue();
		}

    }

	/**
	 *  Insert one <tt>AccountDO</tt> object to DB table <tt>makeploy_account</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into makeploy_account(USER_ID,ORDER_NO,ACCOUNT_NO,AMOUNT,TYPE,SUB_TYPE,POINT,CREATER,GMT_CREATE,MODIFIER,GMT_MODIFIED,MEMO) values (?, ?, ?, ?, ?, ?, ?, ?, CURRENT_TIMESTAMP, ?, CURRENT_TIMESTAMP, ?)</tt>
	 *
	 *	@param account
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int insert(AccountDO account) throws DataAccessException {
    	if (account == null) {
    		throw new IllegalArgumentException("Can't insert a null data object into db.");
    	}
    	
        getSqlMapClientTemplate().insert("MS-ACCOUNT-INSERT", account);

        return account.getId();
    }

	/**
	 *  Query DB table <tt>makeploy_account</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from makeploy_account</tt>
	 *
	 *	@param userId
	 *	@param accountNo
	 *	@param offent
	 *	@param limit
	 *	@return List<AccountDO>
	 *	@throws DataAccessException
	 */	 
    public List<AccountDO> selectAccountInfoByUserIdAndAccountNo(String userId, String accountNo, Integer offent, Integer limit) throws DataAccessException {

	Map<String,Object> param = new HashMap<String,Object>();

        param.put("userId", userId);
        param.put("accountNo", accountNo);
        param.put("offent", offent);
        param.put("limit", limit);

        return getSqlMapClientTemplate().queryForList("MS-ACCOUNT-SELECT-ACCOUNT-INFO-BY-USER-ID-AND-ACCOUNT-NO", param);

    }

	/**
	 *  Insert one <tt>AccountDO</tt> object to DB table <tt>makeploy_account</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into makeploy_account(ID,USER_ID,ORDER_NO,ACCOUNT_NO,AMOUNT,TYPE,SUB_TYPE,POINT,CREATER,GMT_CREATE,MODIFIER,GMT_MODIFIED,MEMO) values (?, ?, ?, ?, ?, ?, ?, ?, ?, CURRENT_TIMESTAMP, ?, CURRENT_TIMESTAMP, ?)</tt>
	 *
	 *	@param account
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int outMoney(AccountDO account) throws DataAccessException {
    	if (account == null) {
    		throw new IllegalArgumentException("Can't insert a null data object into db.");
    	}
    	
        getSqlMapClientTemplate().insert("MS-ACCOUNT-OUT-MONEY", account);

        return account.getId();
    }

	/**
	 *  Query DB table <tt>makeploy_account</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from makeploy_account</tt>
	 *
	 *	@param id
	 *	@return AccountDO
	 *	@throws DataAccessException
	 */	 
    public AccountDO selectAccountInfoByID(Integer id) throws DataAccessException {

	Map<String,Object> param = new HashMap<String,Object>();

        param.put("id", id);

        return (AccountDO) getSqlMapClientTemplate().queryForObject("MS-ACCOUNT-SELECT-ACCOUNT-INFO-BY-ID", param);

    }

	/**
	 *  Query DB table <tt>makeploy_account</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from makeploy_account</tt>
	 *
	 *	@param accountNo
	 *	@return AccountDO
	 *	@throws DataAccessException
	 */	 
    public AccountDO selectAccountInfoByAccountNo(String accountNo) throws DataAccessException {

	Map<String,Object> param = new HashMap<String,Object>();

        param.put("accountNo", accountNo);

        return (AccountDO) getSqlMapClientTemplate().queryForObject("MS-ACCOUNT-SELECT-ACCOUNT-INFO-BY-ACCOUNT-NO", param);

    }

	/**
	 *  Query DB table <tt>makeploy_account</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from makeploy_account</tt>
	 *
	 *	@param type
	 *	@return List<AccountDO>
	 *	@throws DataAccessException
	 */	 
    public List<AccountDO> selectAccountInfoByType(String type) throws DataAccessException {

	Map<String,Object> param = new HashMap<String,Object>();

        param.put("type", type);

        return getSqlMapClientTemplate().queryForList("MS-ACCOUNT-SELECT-ACCOUNT-INFO-BY-TYPE", param);

    }

}
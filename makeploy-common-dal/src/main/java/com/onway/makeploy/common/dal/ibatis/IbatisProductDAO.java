/**
 * yingyinglicai.com Inc.
 * Copyright (c) 2013-2014 All Rights Reserved.
 */
 package com.onway.makeploy.common.dal.ibatis;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;

import com.onway.makeploy.common.dal.daointerface.ProductDAO;

import com.onway.makeploy.common.dal.dataobject.ProductDO;
import java.util.List;
import org.springframework.dao.DataAccessException;
import com.onway.common.lang.Money;
import java.util.Date;
import com.onway.makeploy.common.dal.dataobject.ShopShow;
import java.util.Map;
import java.util.HashMap;

/**
 * An ibatis based implementation of dao interface <tt>com.onway.makeploy.common.dal.daointerface.ProductDAO</tt>.
 *
 * This file is generated by <tt>onway-gen-dal</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>onway</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/makeploy_product.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>onway-gen-dal</tt> 
 * to generate this file.
 *
 * @author guangdong.li
 * @version $Id: IbatisProductDAO.java,v 1.0 2013/10/29 07:34:20 guangdong.li Exp $
 */
public class IbatisProductDAO extends SqlMapClientDaoSupport implements ProductDAO {
	/**
	 *  Query DB table <tt>makeploy_product</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from makeploy_product</tt>
	 *
	 *	@param userId
	 *	@param startRow
	 *	@param pageSize
	 *	@return List<ProductDO>
	 *	@throws DataAccessException
	 */	 
    public List<ProductDO> selectProductByUserId(String userId, Integer startRow, Integer pageSize) throws DataAccessException {

	Map<String,Object> param = new HashMap<String,Object>();

        param.put("userId", userId);
        param.put("startRow", startRow);
        param.put("pageSize", pageSize);

        return getSqlMapClientTemplate().queryForList("MS-PRODUCT-SELECT-PRODUCT-BY-USER-ID", param);

    }

	/**
	 *  Query DB table <tt>makeploy_product</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from makeploy_product</tt>
	 *
	 *	@param productNo
	 *	@return List<ProductDO>
	 *	@throws DataAccessException
	 */	 
    public List<ProductDO> selectProductByProNo(String productNo) throws DataAccessException {

	Map<String,Object> param = new HashMap<String,Object>();

        param.put("productNo", productNo);

        return getSqlMapClientTemplate().queryForList("MS-PRODUCT-SELECT-PRODUCT-BY-PRO-NO", param);

    }

	/**
	 *  Query DB table <tt>makeploy_product</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from makeploy_product</tt>
	 *
	 *	@param shopId
	 *	@param startRow
	 *	@param pageSize
	 *	@return List<ProductDO>
	 *	@throws DataAccessException
	 */	 
    public List<ProductDO> selectProductByShopId(String shopId, Integer startRow, Integer pageSize) throws DataAccessException {

	Map<String,Object> param = new HashMap<String,Object>();

        param.put("shopId", shopId);
        param.put("startRow", startRow);
        param.put("pageSize", pageSize);

        return getSqlMapClientTemplate().queryForList("MS-PRODUCT-SELECT-PRODUCT-BY-SHOP-ID", param);

    }

	/**
	 *  Query DB table <tt>makeploy_product</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from makeploy_product</tt>
	 *
	 *	@return List<ProductDO>
	 *	@throws DataAccessException
	 */	 
    public List<ProductDO> selectNewProduct() throws DataAccessException {


        return getSqlMapClientTemplate().queryForList("MS-PRODUCT-SELECT-NEW-PRODUCT", null);

    }

	/**
	 *  Query DB table <tt>makeploy_product</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from makeploy_product</tt>
	 *
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int selectNewProductCount() throws DataAccessException {


	    Integer retObj = (Integer) getSqlMapClientTemplate().queryForObject("MS-PRODUCT-SELECT-NEW-PRODUCT-COUNT", null);

		if (retObj == null) {
		    return 0;
		} else {
		    return retObj.intValue();
		}

    }

	/**
	 *  Query DB table <tt>makeploy_product</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from makeploy_product where ((DEL_FLG = 0) AND (RECOMMEND_FLG = '3') AND (STATUS = 0) AND (CHECK_STATUS = '1'))</tt>
	 *
	 *	@return List<ProductDO>
	 *	@throws DataAccessException
	 */	 
    public List<ProductDO> selectTmiProduct() throws DataAccessException {


        return getSqlMapClientTemplate().queryForList("MS-PRODUCT-SELECT-TMI-PRODUCT", null);

    }

	/**
	 *  Query DB table <tt>makeploy_product</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from makeploy_product</tt>
	 *
	 *	@param shopId
	 *	@return List<ProductDO>
	 *	@throws DataAccessException
	 */	 
    public List<ProductDO> selectPartnerProduct(String shopId) throws DataAccessException {

	Map<String,Object> param = new HashMap<String,Object>();

        param.put("shopId", shopId);

        return getSqlMapClientTemplate().queryForList("MS-PRODUCT-SELECT-PARTNER-PRODUCT", param);

    }

	/**
	 *  Query DB table <tt>makeploy_product</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from makeploy_product</tt>
	 *
	 *	@param shopId
	 *	@param productNo
	 *	@return ProductDO
	 *	@throws DataAccessException
	 */	 
    public ProductDO selectShopCartProduct(String shopId, String productNo) throws DataAccessException {

	Map<String,Object> param = new HashMap<String,Object>();

        param.put("shopId", shopId);
        param.put("productNo", productNo);

        return (ProductDO) getSqlMapClientTemplate().queryForObject("MS-PRODUCT-SELECT-SHOP-CART-PRODUCT", param);

    }

	/**
	 *  Query DB table <tt>makeploy_product</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from makeploy_product</tt>
	 *
	 *	@param userId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int selectProductCountByUserId(String userId) throws DataAccessException {

	Map<String,Object> param = new HashMap<String,Object>();

        param.put("userId", userId);

	    Integer retObj = (Integer) getSqlMapClientTemplate().queryForObject("MS-PRODUCT-SELECT-PRODUCT-COUNT-BY-USER-ID", param);

		if (retObj == null) {
		    return 0;
		} else {
		    return retObj.intValue();
		}

    }

	/**
	 *  Query DB table <tt>makeploy_product</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from makeploy_product</tt>
	 *
	 *	@param shopId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int selectGoodsCountByShopId(String shopId) throws DataAccessException {

	Map<String,Object> param = new HashMap<String,Object>();

        param.put("shopId", shopId);

	    Integer retObj = (Integer) getSqlMapClientTemplate().queryForObject("MS-PRODUCT-SELECT-GOODS-COUNT-BY-SHOP-ID", param);

		if (retObj == null) {
		    return 0;
		} else {
		    return retObj.intValue();
		}

    }

	/**
	 *  Query DB table <tt>makeploy_product</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from makeploy_product</tt>
	 *
	 *	@param productNo
	 *	@param shopId
	 *	@return ProductDO
	 *	@throws DataAccessException
	 */	 
    public ProductDO selectProductByProductNo(String productNo, String shopId) throws DataAccessException {

	Map<String,Object> param = new HashMap<String,Object>();

        param.put("productNo", productNo);
        param.put("shopId", shopId);

        return (ProductDO) getSqlMapClientTemplate().queryForObject("MS-PRODUCT-SELECT-PRODUCT-BY-PRODUCT-NO", param);

    }

	/**
	 *  Update DB table <tt>makeploy_product</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update makeploy_product set DEL_FLG=1, GMT_MODIFIED=CURRENT_TIMESTAMP where ((USER_ID = ?) AND (PRODUCT_NO = ?))</tt>
	 *
	 *	@param userId
	 *	@param productNo
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteProductDelFlg2Zero(String userId, String productNo) throws DataAccessException {
        Map<String,Object> param = new HashMap<String,Object>();

        param.put("userId", userId);
        param.put("productNo", productNo);

        return getSqlMapClientTemplate().update("MS-PRODUCT-DELETE-PRODUCT-DEL-FLG-2-ZERO", param);
    }

	/**
	 *  Update DB table <tt>makeploy_product</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update makeploy_product set SOLE_COUNT=?, GMT_MODIFIED=CURRENT_TIMESTAMP where ((SHOP_ID = ?) AND (PRODUCT_NO = ?))</tt>
	 *
	 *	@param soleCount
	 *	@param shopId
	 *	@param productNo
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int changeProductSellCount(int soleCount, String shopId, String productNo) throws DataAccessException {
        Map<String,Object> param = new HashMap<String,Object>();

        param.put("soleCount", new Integer(soleCount));
        param.put("shopId", shopId);
        param.put("productNo", productNo);

        return getSqlMapClientTemplate().update("MS-PRODUCT-CHANGE-PRODUCT-SELL-COUNT", param);
    }

	/**
	 *  Update DB table <tt>makeploy_product</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update makeploy_product set STATUS=?, GMT_MODIFIED=CURRENT_TIMESTAMP where ((USER_ID = ?) AND (PRODUCT_NO = ?))</tt>
	 *
	 *	@param status
	 *	@param userId
	 *	@param productNo
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int OffTheShelfProduct(String status, String userId, String productNo) throws DataAccessException {
        Map<String,Object> param = new HashMap<String,Object>();

        param.put("status", status);
        param.put("userId", userId);
        param.put("productNo", productNo);

        return getSqlMapClientTemplate().update("MS-PRODUCT-OFF-THE-SHELF-PRODUCT", param);
    }

	/**
	 *  Update DB table <tt>makeploy_product</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update makeploy_product set user_id=?</tt>
	 *
	 *	@param userId
	 *	@param stock
	 *	@param productNo
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int updateProductCount(String userId, Integer stock, String productNo) throws DataAccessException {
        Map<String,Object> param = new HashMap<String,Object>();

        param.put("userId", userId);
        param.put("stock", stock);
        param.put("productNo", productNo);

        return getSqlMapClientTemplate().update("MS-PRODUCT-UPDATE-PRODUCT-COUNT", param);
    }

	/**
	 *  Update DB table <tt>makeploy_product</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update makeploy_product set PRICE=?, GMT_MODIFIED=CURRENT_TIMESTAMP where ((SHOP_ID = ?) AND (USER_ID = ?) AND (PRODUCT_NO = ?))</tt>
	 *
	 *	@param price
	 *	@param shopId
	 *	@param userId
	 *	@param productNo
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int updateProductPrice(Money price, String shopId, String userId, String productNo) throws DataAccessException {
        Map<String,Object> param = new HashMap<String,Object>();

        param.put("price", price);
        param.put("shopId", shopId);
        param.put("userId", userId);
        param.put("productNo", productNo);

        return getSqlMapClientTemplate().update("MS-PRODUCT-UPDATE-PRODUCT-PRICE", param);
    }

	/**
	 *  Query DB table <tt>makeploy_product</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from makeploy_product</tt>
	 *
	 *	@param delflg
	 *	@return List<ShopShow>
	 *	@throws DataAccessException
	 */	 
    public List<ShopShow> selectShop(String delflg) throws DataAccessException {

	Map<String,Object> param = new HashMap<String,Object>();

        param.put("delflg", delflg);

        return getSqlMapClientTemplate().queryForList("MS-PRODUCT-SELECT-SHOP", param);

    }

	/**
	 *  Query DB table <tt>makeploy_product</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from makeploy_product</tt>
	 *
	 *	@param productType
	 *	@param startRow
	 *	@param pageSize
	 *	@return List<ProductDO>
	 *	@throws DataAccessException
	 */	 
    public List<ProductDO> selectAllProduct(String productType, Integer startRow, Integer pageSize) throws DataAccessException {

	Map<String,Object> param = new HashMap<String,Object>();

        param.put("productType", productType);
        param.put("startRow", startRow);
        param.put("pageSize", pageSize);

        return getSqlMapClientTemplate().queryForList("MS-PRODUCT-SELECT-ALL-PRODUCT", param);

    }

	/**
	 *  Query DB table <tt>makeploy_product</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from makeploy_product</tt>
	 *
	 *	@param productType
	 *	@param startRow
	 *	@param pageSize
	 *	@return List<ProductDO>
	 *	@throws DataAccessException
	 */	 
    public List<ProductDO> selectAllProductOrderByPrice(String productType, Integer startRow, Integer pageSize) throws DataAccessException {

	Map<String,Object> param = new HashMap<String,Object>();

        param.put("productType", productType);
        param.put("startRow", startRow);
        param.put("pageSize", pageSize);

        return getSqlMapClientTemplate().queryForList("MS-PRODUCT-SELECT-ALL-PRODUCT-ORDER-BY-PRICE", param);

    }

	/**
	 *  Query DB table <tt>makeploy_product</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from makeploy_product</tt>
	 *
	 *	@param productType
	 *	@param startRow
	 *	@param pageSize
	 *	@return List<ProductDO>
	 *	@throws DataAccessException
	 */	 
    public List<ProductDO> selectAllProductOrderByPriceDesc(String productType, Integer startRow, Integer pageSize) throws DataAccessException {

	Map<String,Object> param = new HashMap<String,Object>();

        param.put("productType", productType);
        param.put("startRow", startRow);
        param.put("pageSize", pageSize);

        return getSqlMapClientTemplate().queryForList("MS-PRODUCT-SELECT-ALL-PRODUCT-ORDER-BY-PRICE-DESC", param);

    }

	/**
	 *  Query DB table <tt>makeploy_product</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select count(1) from makeploy_product</tt>
	 *
	 *	@param productType
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long selectAllProductCount(String productType) throws DataAccessException {

	Map<String,Object> param = new HashMap<String,Object>();

        param.put("productType", productType);

	    Long retObj = (Long) getSqlMapClientTemplate().queryForObject("MS-PRODUCT-SELECT-ALL-PRODUCT-COUNT", param);

		if (retObj == null) {
		    return 0;
		} else {
		    return retObj.longValue();
		}

    }

	/**
	 *  Query DB table <tt>makeploy_product</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from makeploy_product</tt>
	 *
	 *	@param productType
	 *	@param startRow
	 *	@param pageSize
	 *	@return List<ProductDO>
	 *	@throws DataAccessException
	 */	 
    public List<ProductDO> selectproductByType(String productType, Integer startRow, Integer pageSize) throws DataAccessException {

	Map<String,Object> param = new HashMap<String,Object>();

        param.put("productType", productType);
        param.put("startRow", startRow);
        param.put("pageSize", pageSize);

        return getSqlMapClientTemplate().queryForList("MS-PRODUCT-SELECTPRODUCT-BY-TYPE", param);

    }

	/**
	 *  Query DB table <tt>makeploy_product</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from makeploy_product</tt>
	 *
	 *	@param children
	 *	@param startRow
	 *	@param pageSize
	 *	@return List<ProductDO>
	 *	@throws DataAccessException
	 */	 
    public List<ProductDO> selectChildrenByType(String children, Integer startRow, Integer pageSize) throws DataAccessException {

	Map<String,Object> param = new HashMap<String,Object>();

        param.put("children", children);
        param.put("startRow", startRow);
        param.put("pageSize", pageSize);

        return getSqlMapClientTemplate().queryForList("MS-PRODUCT-SELECT-CHILDREN-BY-TYPE", param);

    }

	/**
	 *  Query DB table <tt>makeploy_product</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from makeploy_product</tt>
	 *
	 *	@param children
	 *	@param startRow
	 *	@param pageSize
	 *	@return List<ProductDO>
	 *	@throws DataAccessException
	 */	 
    public List<ProductDO> selectproductByTypeOrderByPrice(String children, Integer startRow, Integer pageSize) throws DataAccessException {

	Map<String,Object> param = new HashMap<String,Object>();

        param.put("children", children);
        param.put("startRow", startRow);
        param.put("pageSize", pageSize);

        return getSqlMapClientTemplate().queryForList("MS-PRODUCT-SELECTPRODUCT-BY-TYPE-ORDER-BY-PRICE", param);

    }

	/**
	 *  Query DB table <tt>makeploy_product</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from makeploy_product</tt>
	 *
	 *	@param children
	 *	@param startRow
	 *	@param pageSize
	 *	@return List<ProductDO>
	 *	@throws DataAccessException
	 */	 
    public List<ProductDO> selectproductByTypeOrderByPriceDesc(String children, Integer startRow, Integer pageSize) throws DataAccessException {

	Map<String,Object> param = new HashMap<String,Object>();

        param.put("children", children);
        param.put("startRow", startRow);
        param.put("pageSize", pageSize);

        return getSqlMapClientTemplate().queryForList("MS-PRODUCT-SELECTPRODUCT-BY-TYPE-ORDER-BY-PRICE-DESC", param);

    }

	/**
	 *  Query DB table <tt>makeploy_product</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select count(1) from makeploy_product</tt>
	 *
	 *	@param children
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long selectproductCountByType(String children) throws DataAccessException {

	Map<String,Object> param = new HashMap<String,Object>();

        param.put("children", children);

	    Long retObj = (Long) getSqlMapClientTemplate().queryForObject("MS-PRODUCT-SELECTPRODUCT-COUNT-BY-TYPE", param);

		if (retObj == null) {
		    return 0;
		} else {
		    return retObj.longValue();
		}

    }

	/**
	 *  Query DB table <tt>makeploy_product</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from makeploy_product</tt>
	 *
	 *	@return List<ProductDO>
	 *	@throws DataAccessException
	 */	 
    public List<ProductDO> selectTeamGoProduct() throws DataAccessException {


        return getSqlMapClientTemplate().queryForList("MS-PRODUCT-SELECT-TEAM-GO-PRODUCT", null);

    }

	/**
	 *  Query DB table <tt>makeploy_product</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from makeploy_product</tt>
	 *
	 *	@param startRow
	 *	@param pageSize
	 *	@return List<ProductDO>
	 *	@throws DataAccessException
	 */	 
    public List<ProductDO> selectTeamGo(Integer startRow, Integer pageSize) throws DataAccessException {

	Map<String,Object> param = new HashMap<String,Object>();

        param.put("startRow", startRow);
        param.put("pageSize", pageSize);

        return getSqlMapClientTemplate().queryForList("MS-PRODUCT-SELECT-TEAM-GO", param);

    }

	/**
	 *  Query DB table <tt>makeploy_product</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from makeploy_product</tt>
	 *
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int selectTeamGoProductCount() throws DataAccessException {


	    Integer retObj = (Integer) getSqlMapClientTemplate().queryForObject("MS-PRODUCT-SELECT-TEAM-GO-PRODUCT-COUNT", null);

		if (retObj == null) {
		    return 0;
		} else {
		    return retObj.intValue();
		}

    }

	/**
	 *  Query DB table <tt>makeploy_product</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from makeploy_product</tt>
	 *
	 *	@param productName
	 *	@param startRow
	 *	@param pageSize
	 *	@return List<ProductDO>
	 *	@throws DataAccessException
	 */	 
    public List<ProductDO> search(String productName, Integer startRow, Integer pageSize) throws DataAccessException {

	Map<String,Object> param = new HashMap<String,Object>();

        param.put("productName", productName);
        param.put("startRow", startRow);
        param.put("pageSize", pageSize);

        return getSqlMapClientTemplate().queryForList("MS-PRODUCT-SEARCH", param);

    }

	/**
	 *  Update DB table <tt>makeploy_product</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update makeploy_product set STOCK=?, GMT_MODIFIED=CURRENT_TIMESTAMP where ((PRODUCT_NO = ?) AND (SHOP_ID = ?))</tt>
	 *
	 *	@param stock
	 *	@param productNo
	 *	@param shopId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int updateStockByProductNo(int stock, String productNo, String shopId) throws DataAccessException {
        Map<String,Object> param = new HashMap<String,Object>();

        param.put("stock", new Integer(stock));
        param.put("productNo", productNo);
        param.put("shopId", shopId);

        return getSqlMapClientTemplate().update("MS-PRODUCT-UPDATE-STOCK-BY-PRODUCT-NO", param);
    }

	/**
	 *  Update DB table <tt>makeploy_product</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update makeploy_product set NOW_PEOPLE=?, GMT_MODIFIED=CURRENT_TIMESTAMP where ((PRODUCT_NO = ?) AND (SHOP_ID = ?))</tt>
	 *
	 *	@param nowPeople
	 *	@param productNo
	 *	@param shopId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int updateNowPeopleByProNoAndShopId(int nowPeople, String productNo, String shopId) throws DataAccessException {
        Map<String,Object> param = new HashMap<String,Object>();

        param.put("nowPeople", new Integer(nowPeople));
        param.put("productNo", productNo);
        param.put("shopId", shopId);

        return getSqlMapClientTemplate().update("MS-PRODUCT-UPDATE-NOW-PEOPLE-BY-PRO-NO-AND-SHOP-ID", param);
    }

	/**
	 *  Query DB table <tt>makeploy_product</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from makeploy_product</tt>
	 *
	 *	@param productName
	 *	@param startRow
	 *	@param pageSize
	 *	@return List<ProductDO>
	 *	@throws DataAccessException
	 */	 
    public List<ProductDO> searchLikeDesc(String productName, Integer startRow, Integer pageSize) throws DataAccessException {

	Map<String,Object> param = new HashMap<String,Object>();

        param.put("productName", productName);
        param.put("startRow", startRow);
        param.put("pageSize", pageSize);

        return getSqlMapClientTemplate().queryForList("MS-PRODUCT-SEARCH-LIKE-DESC", param);

    }

	/**
	 *  Query DB table <tt>makeploy_product</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from makeploy_product</tt>
	 *
	 *	@param productName
	 *	@param startRow
	 *	@param pageSize
	 *	@return List<ProductDO>
	 *	@throws DataAccessException
	 */	 
    public List<ProductDO> searchLikeAsc(String productName, Integer startRow, Integer pageSize) throws DataAccessException {

	Map<String,Object> param = new HashMap<String,Object>();

        param.put("productName", productName);
        param.put("startRow", startRow);
        param.put("pageSize", pageSize);

        return getSqlMapClientTemplate().queryForList("MS-PRODUCT-SEARCH-LIKE-ASC", param);

    }

	/**
	 *  Insert one <tt>ProductDO</tt> object to DB table <tt>makeploy_product</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into makeploy_product(SHOP_ID,USER_ID,OTHER_TYPE,PRODUCT_NO,PRODUCT_NAME,PRODUCT_TYPE,PRODUCT_WEIGHT,CHILDREN,PRODUCT_OFF,PRICE,LUGGAGE,TEMPLATE_ID,USE_POINT,OLD_PRICE,CHECK_STATUS,STATUS,STOCK,PRODUCT_URL,DEL_FLG,PROPORTION_RETURN,PROPORTION_INTEGRAL,CREATER,GMT_CREATE,MODIFIER,GMT_MODIFIED,MEMO) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, CURRENT_TIMESTAMP, ?, CURRENT_TIMESTAMP, ?)</tt>
	 *
	 *	@param product
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int insert(ProductDO product) throws DataAccessException {
    	if (product == null) {
    		throw new IllegalArgumentException("Can't insert a null data object into db.");
    	}
    	
        getSqlMapClientTemplate().insert("MS-PRODUCT-INSERT", product);

        return product.getId();
    }

	/**
	 *  Update DB table <tt>makeploy_product</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update makeploy_product set PRODUCT_NAME=?, PRODUCT_TYPE=?, CHILDREN=?, PRODUCT_OFF=?, PRICE=?, LUGGAGE=?, OLD_PRICE=?, STOCK=?, PRODUCT_URL=?, GMT_MODIFIED=CURRENT_TIMESTAMP where ((SHOP_ID = ?) AND (PRODUCT_NO = ?))</tt>
	 *
	 *	@param productName
	 *	@param productType
	 *	@param children
	 *	@param productOff
	 *	@param price
	 *	@param luggage
	 *	@param oldPrice
	 *	@param stock
	 *	@param productUrl
	 *	@param shopId
	 *	@param productNo
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int updateProductInfo(String productName, String productType, String children, double productOff, Money price, Money luggage, Money oldPrice, int stock, String productUrl, String shopId, String productNo) throws DataAccessException {
        Map<String,Object> param = new HashMap<String,Object>();

        param.put("productName", productName);
        param.put("productType", productType);
        param.put("children", children);
        param.put("productOff", new Double(productOff));
        param.put("price", price);
        param.put("luggage", luggage);
        param.put("oldPrice", oldPrice);
        param.put("stock", new Integer(stock));
        param.put("productUrl", productUrl);
        param.put("shopId", shopId);
        param.put("productNo", productNo);

        return getSqlMapClientTemplate().update("MS-PRODUCT-UPDATE-PRODUCT-INFO", param);
    }

	/**
	 *  Update DB table <tt>makeploy_product</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update makeploy_product set PRODUCT_NAME=?, PRODUCT_TYPE=?, CHILDREN=?, PRICE=?, OLD_PRICE=?, LUGGAGE=?, STOCK=?, PRODUCT_URL=?, MEMO=?, GMT_MODIFIED=CURRENT_TIMESTAMP where ((SHOP_ID = ?) AND (PRODUCT_NO = ?))</tt>
	 *
	 *	@param productName
	 *	@param productType
	 *	@param children
	 *	@param price
	 *	@param oldPrice
	 *	@param luggage
	 *	@param stock
	 *	@param productUrl
	 *	@param memo
	 *	@param shopId
	 *	@param productNo
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int editProductInfo(String productName, String productType, String children, Money price, Money oldPrice, Money luggage, int stock, String productUrl, String memo, String shopId, String productNo) throws DataAccessException {
        Map<String,Object> param = new HashMap<String,Object>();

        param.put("productName", productName);
        param.put("productType", productType);
        param.put("children", children);
        param.put("price", price);
        param.put("oldPrice", oldPrice);
        param.put("luggage", luggage);
        param.put("stock", new Integer(stock));
        param.put("productUrl", productUrl);
        param.put("memo", memo);
        param.put("shopId", shopId);
        param.put("productNo", productNo);

        return getSqlMapClientTemplate().update("MS-PRODUCT-EDIT-PRODUCT-INFO", param);
    }

	/**
	 *  Update DB table <tt>makeploy_product</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update makeploy_product set PRODUCT_NAME=?, PRODUCT_TYPE=?, CHILDREN=?, PRICE=?, OLD_PRICE=?, TEMPLATE_ID=?, STOCK=?, PRODUCT_URL=?, PRODUCT_WEIGHT=?, USE_POINT=?, GMT_MODIFIED=CURRENT_TIMESTAMP where ((SHOP_ID = ?) AND (PRODUCT_NO = ?))</tt>
	 *
	 *	@param productName
	 *	@param productType
	 *	@param children
	 *	@param price
	 *	@param oldPrice
	 *	@param templateId
	 *	@param stock
	 *	@param productUrl
	 *	@param productWeight
	 *	@param usePoint
	 *	@param shopId
	 *	@param productNo
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int editProduct(String productName, String productType, String children, Money price, Money oldPrice, String templateId, int stock, String productUrl, double productWeight, Money usePoint, String shopId, String productNo) throws DataAccessException {
        Map<String,Object> param = new HashMap<String,Object>();

        param.put("productName", productName);
        param.put("productType", productType);
        param.put("children", children);
        param.put("price", price);
        param.put("oldPrice", oldPrice);
        param.put("templateId", templateId);
        param.put("stock", new Integer(stock));
        param.put("productUrl", productUrl);
        param.put("productWeight", new Double(productWeight));
        param.put("usePoint", usePoint);
        param.put("shopId", shopId);
        param.put("productNo", productNo);

        return getSqlMapClientTemplate().update("MS-PRODUCT-EDIT-PRODUCT", param);
    }

	/**
	 *  Update DB table <tt>makeploy_product</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update makeploy_product set STATUS=?, GMT_MODIFIED=CURRENT_TIMESTAMP where ((SHOP_ID = ?) AND (PRODUCT_NO = ?))</tt>
	 *
	 *	@param status
	 *	@param shopId
	 *	@param productNo
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int updateProductUpDownSTATUS(String status, String shopId, String productNo) throws DataAccessException {
        Map<String,Object> param = new HashMap<String,Object>();

        param.put("status", status);
        param.put("shopId", shopId);
        param.put("productNo", productNo);

        return getSqlMapClientTemplate().update("MS-PRODUCT-UPDATE-PRODUCT-UP-DOWN-STATUS", param);
    }

	/**
	 *  Update DB table <tt>makeploy_product</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update makeploy_product set STATUS=?, GMT_MODIFIED=CURRENT_TIMESTAMP where (PRODUCT_NO = ?)</tt>
	 *
	 *	@param status
	 *	@param productNo
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int updateProductUpDownSTATUSByProNo(String status, String productNo) throws DataAccessException {
        Map<String,Object> param = new HashMap<String,Object>();

        param.put("status", status);
        param.put("productNo", productNo);

        return getSqlMapClientTemplate().update("MS-PRODUCT-UPDATE-PRODUCT-UP-DOWN-STATUS-BY-PRO-NO", param);
    }

	/**
	 *  Update DB table <tt>makeploy_product</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update makeploy_product set DEL_FLG=?, GMT_MODIFIED=CURRENT_TIMESTAMP where ((SHOP_ID = ?) AND (PRODUCT_NO = ?))</tt>
	 *
	 *	@param delFlg
	 *	@param shopId
	 *	@param productNo
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int updateProductDelflag(String delFlg, String shopId, String productNo) throws DataAccessException {
        Map<String,Object> param = new HashMap<String,Object>();

        param.put("delFlg", delFlg);
        param.put("shopId", shopId);
        param.put("productNo", productNo);

        return getSqlMapClientTemplate().update("MS-PRODUCT-UPDATE-PRODUCT-DELFLAG", param);
    }

	/**
	 *  Query DB table <tt>makeploy_product</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from makeploy_product</tt>
	 *
	 *	@param productName
	 *	@param startRow
	 *	@param pageSize
	 *	@return List<ProductDO>
	 *	@throws DataAccessException
	 */	 
    public List<ProductDO> searchLikeAll(String productName, Integer startRow, Integer pageSize) throws DataAccessException {

	Map<String,Object> param = new HashMap<String,Object>();

        param.put("productName", productName);
        param.put("startRow", startRow);
        param.put("pageSize", pageSize);

        return getSqlMapClientTemplate().queryForList("MS-PRODUCT-SEARCH-LIKE-ALL", param);

    }

	/**
	 *  Query DB table <tt>makeploy_product</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select count(1) from makeploy_product</tt>
	 *
	 *	@param productName
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long searchLikeCount(String productName) throws DataAccessException {

	Map<String,Object> param = new HashMap<String,Object>();

        param.put("productName", productName);

	    Long retObj = (Long) getSqlMapClientTemplate().queryForObject("MS-PRODUCT-SEARCH-LIKE-COUNT", param);

		if (retObj == null) {
		    return 0;
		} else {
		    return retObj.longValue();
		}

    }

	/**
	 *  Update DB table <tt>makeploy_product</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update makeploy_product set RECOMMEND_FLG=?, GMT_MODIFIED=CURRENT_TIMESTAMP where ((SHOP_ID = ?) AND (PRODUCT_NO = ?))</tt>
	 *
	 *	@param recommendFlg
	 *	@param shopId
	 *	@param productNo
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int updateRecommendFlgByShopIdAndProductNo(String recommendFlg, String shopId, String productNo) throws DataAccessException {
        Map<String,Object> param = new HashMap<String,Object>();

        param.put("recommendFlg", recommendFlg);
        param.put("shopId", shopId);
        param.put("productNo", productNo);

        return getSqlMapClientTemplate().update("MS-PRODUCT-UPDATE-RECOMMEND-FLG-BY-SHOP-ID-AND-PRODUCT-NO", param);
    }

	/**
	 *  Query DB table <tt>makeploy_product</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select count(1) from makeploy_product</tt>
	 *
	 *	@param shopId
	 *	@param productNo
	 *	@param flg
	 *	@param proName
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long countRecommendFlg(String shopId, String productNo, String flg, String proName) throws DataAccessException {

	Map<String,Object> param = new HashMap<String,Object>();

        param.put("shopId", shopId);
        param.put("productNo", productNo);
        param.put("flg", flg);
        param.put("proName", proName);

	    Long retObj = (Long) getSqlMapClientTemplate().queryForObject("MS-PRODUCT-COUNT-RECOMMEND-FLG", param);

		if (retObj == null) {
		    return 0;
		} else {
		    return retObj.longValue();
		}

    }

	/**
	 *  Query DB table <tt>makeploy_product</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from makeploy_product</tt>
	 *
	 *	@param shopId
	 *	@param productNo
	 *	@param rflg
	 *	@param offent
	 *	@param limit
	 *	@param proName
	 *	@return List<ProductDO>
	 *	@throws DataAccessException
	 */	 
    public List<ProductDO> selectByRecommendFlg(String shopId, String productNo, String rflg, Integer offent, Integer limit, String proName) throws DataAccessException {

	Map<String,Object> param = new HashMap<String,Object>();

        param.put("shopId", shopId);
        param.put("productNo", productNo);
        param.put("rflg", rflg);
        param.put("offent", offent);
        param.put("limit", limit);
        param.put("proName", proName);

        return getSqlMapClientTemplate().queryForList("MS-PRODUCT-SELECT-BY-RECOMMEND-FLG", param);

    }

	/**
	 *  Query DB table <tt>makeploy_product</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from makeploy_product</tt>
	 *
	 *	@param shopId
	 *	@param productName
	 *	@param productType
	 *	@param children
	 *	@param productNo
	 *	@param status
	 *	@param checkStatus
	 *	@param recommendFlg
	 *	@param priceMin
	 *	@param priceMax
	 *	@param startDate
	 *	@param endDate
	 *	@param startRow
	 *	@param pageSize
	 *	@return List<ProductDO>
	 *	@throws DataAccessException
	 */	 
    public List<ProductDO> selectProductByShopIdSearchBox(String shopId, String productName, String productType, String children, String productNo, String status, String checkStatus, String recommendFlg, Double priceMin, Double priceMax, Date startDate, Date endDate, Integer startRow, Integer pageSize) throws DataAccessException {

	Map<String,Object> param = new HashMap<String,Object>();

        param.put("shopId", shopId);
        param.put("productName", productName);
        param.put("productType", productType);
        param.put("children", children);
        param.put("productNo", productNo);
        param.put("status", status);
        param.put("checkStatus", checkStatus);
        param.put("recommendFlg", recommendFlg);
        param.put("priceMin", priceMin);
        param.put("priceMax", priceMax);
        param.put("startDate", startDate);
        param.put("endDate", endDate);
        param.put("startRow", startRow);
        param.put("pageSize", pageSize);

        return getSqlMapClientTemplate().queryForList("MS-PRODUCT-SELECT-PRODUCT-BY-SHOP-ID-SEARCH-BOX", param);

    }

	/**
	 *  Query DB table <tt>makeploy_product</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from makeploy_product</tt>
	 *
	 *	@param shopId
	 *	@param productName
	 *	@param productType
	 *	@param children
	 *	@param productNo
	 *	@param status
	 *	@param checkStatus
	 *	@param recommendFlg
	 *	@param priceMin
	 *	@param priceMax
	 *	@param startDate
	 *	@param endDate
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int selectCountProductByShopIdSearchBox(String shopId, String productName, String productType, String children, String productNo, String status, String checkStatus, String recommendFlg, Double priceMin, Double priceMax, Date startDate, Date endDate) throws DataAccessException {

	Map<String,Object> param = new HashMap<String,Object>();

        param.put("shopId", shopId);
        param.put("productName", productName);
        param.put("productType", productType);
        param.put("children", children);
        param.put("productNo", productNo);
        param.put("status", status);
        param.put("checkStatus", checkStatus);
        param.put("recommendFlg", recommendFlg);
        param.put("priceMin", priceMin);
        param.put("priceMax", priceMax);
        param.put("startDate", startDate);
        param.put("endDate", endDate);

	    Integer retObj = (Integer) getSqlMapClientTemplate().queryForObject("MS-PRODUCT-SELECT-COUNT-PRODUCT-BY-SHOP-ID-SEARCH-BOX", param);

		if (retObj == null) {
		    return 0;
		} else {
		    return retObj.intValue();
		}

    }

	/**
	 *  Query DB table <tt>makeploy_product</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from makeploy_product</tt>
	 *
	 *	@param shopId
	 *	@param productNo
	 *	@param startRow
	 *	@param pageSize
	 *	@return List<ProductDO>
	 *	@throws DataAccessException
	 */	 
    public List<ProductDO> selectUncheckProduct(String shopId, String productNo, Integer startRow, Integer pageSize) throws DataAccessException {

	Map<String,Object> param = new HashMap<String,Object>();

        param.put("shopId", shopId);
        param.put("productNo", productNo);
        param.put("startRow", startRow);
        param.put("pageSize", pageSize);

        return getSqlMapClientTemplate().queryForList("MS-PRODUCT-SELECT-UNCHECK-PRODUCT", param);

    }

	/**
	 *  Query DB table <tt>makeploy_product</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select count(1) from makeploy_product</tt>
	 *
	 *	@param shopId
	 *	@param productNo
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int selectCountUncheckProduct(String shopId, String productNo) throws DataAccessException {

	Map<String,Object> param = new HashMap<String,Object>();

        param.put("shopId", shopId);
        param.put("productNo", productNo);

	    Integer retObj = (Integer) getSqlMapClientTemplate().queryForObject("MS-PRODUCT-SELECT-COUNT-UNCHECK-PRODUCT", param);

		if (retObj == null) {
		    return 0;
		} else {
		    return retObj.intValue();
		}

    }

	/**
	 *  Update DB table <tt>makeploy_product</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update makeploy_product set CHECK_STATUS=?, STATUS=?, PROPORTION_RETURN=?, PROPORTION_INTEGRAL=?, GMT_MODIFIED=CURRENT_TIMESTAMP where ((PRODUCT_NO = ?) AND (SHOP_ID = ?))</tt>
	 *
	 *	@param checkStatus
	 *	@param status
	 *	@param proportionReturn
	 *	@param proportionIntegral
	 *	@param productNo
	 *	@param shopId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int updateProductCheck(String checkStatus, String status, double proportionReturn, double proportionIntegral, String productNo, String shopId) throws DataAccessException {
        Map<String,Object> param = new HashMap<String,Object>();

        param.put("checkStatus", checkStatus);
        param.put("status", status);
        param.put("proportionReturn", new Double(proportionReturn));
        param.put("proportionIntegral", new Double(proportionIntegral));
        param.put("productNo", productNo);
        param.put("shopId", shopId);

        return getSqlMapClientTemplate().update("MS-PRODUCT-UPDATE-PRODUCT-CHECK", param);
    }

	/**
	 *  Update DB table <tt>makeploy_product</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update makeploy_product set NEED_PEOPLE=?, PRICE=?, PRODUCT_OFF=?, GMT_MODIFIED=CURRENT_TIMESTAMP where ((SHOP_ID = ?) AND (PRODUCT_NO = ?))</tt>
	 *
	 *	@param needPeople
	 *	@param price
	 *	@param productOff
	 *	@param shopId
	 *	@param productNo
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int updateNeedpeople(int needPeople, Money price, double productOff, String shopId, String productNo) throws DataAccessException {
        Map<String,Object> param = new HashMap<String,Object>();

        param.put("needPeople", new Integer(needPeople));
        param.put("price", price);
        param.put("productOff", new Double(productOff));
        param.put("shopId", shopId);
        param.put("productNo", productNo);

        return getSqlMapClientTemplate().update("MS-PRODUCT-UPDATE-NEEDPEOPLE", param);
    }

	/**
	 *  Query DB table <tt>makeploy_product</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from makeploy_product</tt>
	 *
	 *	@param userId
	 *	@return List<ProductDO>
	 *	@throws DataAccessException
	 */	 
    public List<ProductDO> searchShopId(String userId) throws DataAccessException {

	Map<String,Object> param = new HashMap<String,Object>();

        param.put("userId", userId);

        return getSqlMapClientTemplate().queryForList("MS-PRODUCT-SEARCH-SHOP-ID", param);

    }

	/**
	 *  Update DB table <tt>makeploy_product</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update makeploy_product set PRODUCT_NO=?, PRODUCT_NAME=?, PRODUCT_TYPE=?, PRICE=?, PRODUCT_OFF=?, OLD_PRICE=?, LUGGAGE=?, RECOMMEND_FLG=?, GMT_MODIFIED=CURRENT_TIMESTAMP where (SHOP_ID = ?)</tt>
	 *
	 *	@param productNo
	 *	@param productName
	 *	@param productType
	 *	@param price
	 *	@param productOff
	 *	@param oldPrice
	 *	@param luggage
	 *	@param recommendFlg
	 *	@param shopId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int updateProduct(String productNo, String productName, String productType, Money price, double productOff, Money oldPrice, Money luggage, String recommendFlg, String shopId) throws DataAccessException {
        Map<String,Object> param = new HashMap<String,Object>();

        param.put("productNo", productNo);
        param.put("productName", productName);
        param.put("productType", productType);
        param.put("price", price);
        param.put("productOff", new Double(productOff));
        param.put("oldPrice", oldPrice);
        param.put("luggage", luggage);
        param.put("recommendFlg", recommendFlg);
        param.put("shopId", shopId);

        return getSqlMapClientTemplate().update("MS-PRODUCT-UPDATE-PRODUCT", param);
    }

	/**
	 *  Query DB table <tt>makeploy_product</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from makeploy_product</tt>
	 *
	 *	@param userId
	 *	@param offset
	 *	@param limit
	 *	@return List<ProductDO>
	 *	@throws DataAccessException
	 */	 
    public List<ProductDO> searchProductInfo(String userId, Integer offset, Integer limit) throws DataAccessException {

	Map<String,Object> param = new HashMap<String,Object>();

        param.put("userId", userId);
        param.put("offset", offset);
        param.put("limit", limit);

        return getSqlMapClientTemplate().queryForList("MS-PRODUCT-SEARCH-PRODUCT-INFO", param);

    }

	/**
	 *  Query DB table <tt>makeploy_product</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from makeploy_product where (RECOMMEND_FLG = ?)</tt>
	 *
	 *	@param recommendFlg
	 *	@return List<ProductDO>
	 *	@throws DataAccessException
	 */	 
    public List<ProductDO> searchParenter(String recommendFlg) throws DataAccessException {

 
        return getSqlMapClientTemplate().queryForList("MS-PRODUCT-SEARCH-PARENTER", recommendFlg);

    }

	/**
	 *  Query DB table <tt>makeploy_product</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select count(1) from makeploy_product</tt>
	 *
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long total() throws DataAccessException {


	    Long retObj = (Long) getSqlMapClientTemplate().queryForObject("MS-PRODUCT-TOTAL", null);

		if (retObj == null) {
		    return 0;
		} else {
		    return retObj.longValue();
		}

    }

	/**
	 *  Update DB table <tt>makeploy_product</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update makeploy_product set RECOMMEND_FLG=?, GMT_MODIFIED=CURRENT_TIMESTAMP where ((PRODUCT_NO = ?) AND (SHOP_ID = ?))</tt>
	 *
	 *	@param recommendFlg
	 *	@param productNo
	 *	@param shopId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int updateStatus(String recommendFlg, String productNo, String shopId) throws DataAccessException {
        Map<String,Object> param = new HashMap<String,Object>();

        param.put("recommendFlg", recommendFlg);
        param.put("productNo", productNo);
        param.put("shopId", shopId);

        return getSqlMapClientTemplate().update("MS-PRODUCT-UPDATE-STATUS", param);
    }

	/**
	 *  Query DB table <tt>makeploy_product</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from makeploy_product where (PRODUCT_NO = ?)</tt>
	 *
	 *	@param productNo
	 *	@return ProductDO
	 *	@throws DataAccessException
	 */	 
    public ProductDO selectByShopIdSearch(String productNo) throws DataAccessException {

 
        return (ProductDO) getSqlMapClientTemplate().queryForObject("MS-PRODUCT-SELECT-BY-SHOP-ID-SEARCH", productNo);

    }

	/**
	 *  Insert one <tt>ProductDO</tt> object to DB table <tt>makeploy_product</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into makeploy_product(SHOP_ID,USER_ID,OTHER_TYPE,PRODUCT_NO,PRODUCT_NAME,PRODUCT_TYPE,PRODUCT_WEIGHT,CHILDREN,PRICE,PRODUCT_OFF,TEMPLATE_ID,OLD_PRICE,CHECK_STATUS,NEED_PEOPLE,NOW_PEOPLE,LUGGAGE,STATUS,STOCK,PRODUCT_URL,DEL_FLG,RECOMMEND_FLG,SOLE_COUNT,PROPORTION_RETURN,PROPORTION_INTEGRAL,CREATER,GMT_CREATE,MODIFIER,GMT_MODIFIED,MEMO) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, CURRENT_TIMESTAMP, ?, CURRENT_TIMESTAMP, ?)</tt>
	 *
	 *	@param product
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int addPartnerPro(ProductDO product) throws DataAccessException {
    	if (product == null) {
    		throw new IllegalArgumentException("Can't insert a null data object into db.");
    	}
    	
        getSqlMapClientTemplate().insert("MS-PRODUCT-ADD-PARTNER-PRO", product);

        return product.getId();
    }

	/**
	 *  Query DB table <tt>makeploy_product</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from makeploy_product</tt>
	 *
	 *	@param shopId
	 *	@param proNo
	 *	@param proName
	 *	@param fatherType
	 *	@param childrenType
	 *	@param offset
	 *	@param limit
	 *	@return List<ProductDO>
	 *	@throws DataAccessException
	 */	 
    public List<ProductDO> selectShopProInfo(String shopId, String proNo, String proName, String fatherType, String childrenType, Integer offset, Integer limit) throws DataAccessException {

	Map<String,Object> param = new HashMap<String,Object>();

        param.put("shopId", shopId);
        param.put("proNo", proNo);
        param.put("proName", proName);
        param.put("fatherType", fatherType);
        param.put("childrenType", childrenType);
        param.put("offset", offset);
        param.put("limit", limit);

        return getSqlMapClientTemplate().queryForList("MS-PRODUCT-SELECT-SHOP-PRO-INFO", param);

    }

	/**
	 *  Query DB table <tt>makeploy_product</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select count(1) from makeploy_product</tt>
	 *
	 *	@param shopId
	 *	@param proNo
	 *	@param proName
	 *	@param fatherType
	 *	@param childrenType
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long proInfoCount(String shopId, String proNo, String proName, String fatherType, String childrenType) throws DataAccessException {

	Map<String,Object> param = new HashMap<String,Object>();

        param.put("shopId", shopId);
        param.put("proNo", proNo);
        param.put("proName", proName);
        param.put("fatherType", fatherType);
        param.put("childrenType", childrenType);

	    Long retObj = (Long) getSqlMapClientTemplate().queryForObject("MS-PRODUCT-PRO-INFO-COUNT", param);

		if (retObj == null) {
		    return 0;
		} else {
		    return retObj.longValue();
		}

    }

	/**
	 *  Update DB table <tt>makeploy_product</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update makeploy_product set PRICE=?, NEED_PEOPLE=?, RECOMMEND_FLG=?, GMT_MODIFIED=CURRENT_TIMESTAMP where ((SHOP_ID = ?) AND (PRODUCT_NO = ?))</tt>
	 *
	 *	@param price
	 *	@param needPeople
	 *	@param recommendFlg
	 *	@param shopId
	 *	@param productNo
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int updateProPromotionTeamGo(Money price, int needPeople, String recommendFlg, String shopId, String productNo) throws DataAccessException {
        Map<String,Object> param = new HashMap<String,Object>();

        param.put("price", price);
        param.put("needPeople", new Integer(needPeople));
        param.put("recommendFlg", recommendFlg);
        param.put("shopId", shopId);
        param.put("productNo", productNo);

        return getSqlMapClientTemplate().update("MS-PRODUCT-UPDATE-PRO-PROMOTION-TEAM-GO", param);
    }

	/**
	 *  Update DB table <tt>makeploy_product</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update makeploy_product set PRICE=?, RECOMMEND_FLG=?, GMT_MODIFIED=CURRENT_TIMESTAMP where ((SHOP_ID = ?) AND (PRODUCT_NO = ?))</tt>
	 *
	 *	@param price
	 *	@param recommendFlg
	 *	@param shopId
	 *	@param productNo
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int updateProPromotionFirstTime(Money price, String recommendFlg, String shopId, String productNo) throws DataAccessException {
        Map<String,Object> param = new HashMap<String,Object>();

        param.put("price", price);
        param.put("recommendFlg", recommendFlg);
        param.put("shopId", shopId);
        param.put("productNo", productNo);

        return getSqlMapClientTemplate().update("MS-PRODUCT-UPDATE-PRO-PROMOTION-FIRST-TIME", param);
    }

	/**
	 *  Update DB table <tt>makeploy_product</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update makeploy_product set STATUS=?, GMT_MODIFIED=CURRENT_TIMESTAMP where (SHOP_ID = ?)</tt>
	 *
	 *	@param status
	 *	@param shopId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int downProductOrderByShop(String status, String shopId) throws DataAccessException {
        Map<String,Object> param = new HashMap<String,Object>();

        param.put("status", status);
        param.put("shopId", shopId);

        return getSqlMapClientTemplate().update("MS-PRODUCT-DOWN-PRODUCT-ORDER-BY-SHOP", param);
    }

}
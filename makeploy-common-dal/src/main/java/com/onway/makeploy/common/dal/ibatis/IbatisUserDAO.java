/**
 * yingyinglicai.com Inc.
 * Copyright (c) 2013-2014 All Rights Reserved.
 */
 package com.onway.makeploy.common.dal.ibatis;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;

import com.onway.makeploy.common.dal.daointerface.UserDAO;

import com.onway.makeploy.common.dal.dataobject.UserDO;
import org.springframework.dao.DataAccessException;
import com.onway.common.lang.Money;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/**
 * An ibatis based implementation of dao interface <tt>com.onway.makeploy.common.dal.daointerface.UserDAO</tt>.
 *
 * This file is generated by <tt>onway-gen-dal</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>onway</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/makeploy_user.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>onway-gen-dal</tt> 
 * to generate this file.
 *
 * @author guangdong.li
 * @version $Id: IbatisUserDAO.java,v 1.0 2013/10/29 07:34:20 guangdong.li Exp $
 */
public class IbatisUserDAO extends SqlMapClientDaoSupport implements UserDAO {
	/**
	 *  Query DB table <tt>makeploy_user</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from makeploy_user</tt>
	 *
	 *	@param userId
	 *	@return UserDO
	 *	@throws DataAccessException
	 */	 
    public UserDO selectUserInfoByUserId(String userId) throws DataAccessException {

	Map<String,Object> param = new HashMap<String,Object>();

        param.put("userId", userId);

        return (UserDO) getSqlMapClientTemplate().queryForObject("MS-USER-SELECT-USER-INFO-BY-USER-ID", param);

    }

	/**
	 *  Query DB table <tt>makeploy_user</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from makeploy_user</tt>
	 *
	 *	@param commerceId
	 *	@return UserDO
	 *	@throws DataAccessException
	 */	 
    public UserDO selectUserInfoByCommerceId(String commerceId) throws DataAccessException {

	Map<String,Object> param = new HashMap<String,Object>();

        param.put("commerceId", commerceId);

        return (UserDO) getSqlMapClientTemplate().queryForObject("MS-USER-SELECT-USER-INFO-BY-COMMERCE-ID", param);

    }

	/**
	 *  Insert one <tt>UserDO</tt> object to DB table <tt>makeploy_user</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into makeploy_user(ID,USER_ID,WECHAT_ID,PROMOTE_ID,SHOP_ID,COMMERCE_ID,USER_NAME,USER_NUM,CELL,NICK_NAME,SEX,HEAD_URL,PASS_WORD,CERT_TYPE,CERT_NO,CONSUME_ACCOUT,DIVIDEND_ACCOUT,WITHDRAW_ACCOUT,BALANCE,TOTAL_BALANCE,INCOME_WEEK,HIGH_USER_ID,QR_URL,CREATER,GMT_CREATE,MODIFIER,GMT_MODIFIED,MEMO) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, CURRENT_TIMESTAMP, ?, CURRENT_TIMESTAMP, ?)</tt>
	 *
	 *	@param user
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int addUserInfo(UserDO user) throws DataAccessException {
    	if (user == null) {
    		throw new IllegalArgumentException("Can't insert a null data object into db.");
    	}
    	
        getSqlMapClientTemplate().insert("MS-USER-ADD-USER-INFO", user);

        return user.getId();
    }

	/**
	 *  Update DB table <tt>makeploy_user</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update makeploy_user set CELL=?, NICK_NAME=?, HEAD_URL=?, GMT_MODIFIED=CURRENT_TIMESTAMP where (USER_ID = ?)</tt>
	 *
	 *	@param user
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int updateUserInfo(UserDO user) throws DataAccessException {
    	if (user == null) {
    		throw new IllegalArgumentException("Can't update by a null data object.");
    	}


        return getSqlMapClientTemplate().update("MS-USER-UPDATE-USER-INFO", user);
    }

	/**
	 *  Update DB table <tt>makeploy_user</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update makeploy_user set QR_URL=?, GMT_MODIFIED=CURRENT_TIMESTAMP where (USER_ID = ?)</tt>
	 *
	 *	@param qrUrl
	 *	@param userId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int updateUserQR(String qrUrl, String userId) throws DataAccessException {
        Map<String,Object> param = new HashMap<String,Object>();

        param.put("qrUrl", qrUrl);
        param.put("userId", userId);

        return getSqlMapClientTemplate().update("MS-USER-UPDATE-USER-QR", param);
    }

	/**
	 *  Query DB table <tt>makeploy_user</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from makeploy_user</tt>
	 *
	 *	@param cell
	 *	@param role
	 *	@return String
	 *	@throws DataAccessException
	 */	 
    public String login(String cell, String role) throws DataAccessException {

	Map<String,Object> param = new HashMap<String,Object>();

        param.put("cell", cell);
        param.put("role", role);

        return (String) getSqlMapClientTemplate().queryForObject("MS-USER-LOGIN", param);

    }

	/**
	 *  Query DB table <tt>makeploy_user</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from makeploy_user where (CELL = ?)</tt>
	 *
	 *	@param cell
	 *	@return UserDO
	 *	@throws DataAccessException
	 */	 
    public UserDO selectUserInfoByCell(String cell) throws DataAccessException {

 
        return (UserDO) getSqlMapClientTemplate().queryForObject("MS-USER-SELECT-USER-INFO-BY-CELL", cell);

    }

	/**
	 *  Update DB table <tt>makeploy_user</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update makeploy_user set WITHDRAW_ACCOUT=?, BALANCE=?, GMT_MODIFIED=CURRENT_TIMESTAMP where (USER_ID = ?)</tt>
	 *
	 *	@param withdrawAccout
	 *	@param balance
	 *	@param userId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int updateWithDraw(Money withdrawAccout, Money balance, String userId) throws DataAccessException {
        Map<String,Object> param = new HashMap<String,Object>();

        param.put("withdrawAccout", withdrawAccout);
        param.put("balance", balance);
        param.put("userId", userId);

        return getSqlMapClientTemplate().update("MS-USER-UPDATE-WITH-DRAW", param);
    }

	/**
	 *  Query DB table <tt>makeploy_user</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from makeploy_user</tt>
	 *
	 *	@param userId
	 *	@param cell
	 *	@param userNickName
	 *	@param offent
	 *	@param limit
	 *	@return List<UserDO>
	 *	@throws DataAccessException
	 */	 
    public List<UserDO> userInfo(String  userId, String  cell, String  userNickName, Integer offent, Integer limit) throws DataAccessException {

	Map<String,Object> param = new HashMap<String,Object>();

        param.put("userId", userId);
        param.put("cell", cell);
        param.put("userNickName", userNickName);
        param.put("offent", offent);
        param.put("limit", limit);

        return getSqlMapClientTemplate().queryForList("MS-USER-USER-INFO", param);

    }

	/**
	 *  Query DB table <tt>makeploy_user</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select count(1) from makeploy_user</tt>
	 *
	 *	@param userId
	 *	@param cell
	 *	@param userNickName
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long count(String  userId, String  cell, String  userNickName) throws DataAccessException {

	Map<String,Object> param = new HashMap<String,Object>();

        param.put("userId", userId);
        param.put("cell", cell);
        param.put("userNickName", userNickName);

	    Long retObj = (Long) getSqlMapClientTemplate().queryForObject("MS-USER-COUNT", param);

		if (retObj == null) {
		    return 0;
		} else {
		    return retObj.longValue();
		}

    }

	/**
	 *  Update DB table <tt>makeploy_user</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update makeploy_user set POINT_ACCOUT=?, BALANCE=?, WITHDRAW_ACCOUT=?, GMT_MODIFIED=CURRENT_TIMESTAMP where (USER_ID = ?)</tt>
	 *
	 *	@param pointAccout
	 *	@param balance
	 *	@param withdrawAccout
	 *	@param userId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int updateUserReturn(int pointAccout, Money balance, Money withdrawAccout, String userId) throws DataAccessException {
        Map<String,Object> param = new HashMap<String,Object>();

        param.put("pointAccout", new Integer(pointAccout));
        param.put("balance", balance);
        param.put("withdrawAccout", withdrawAccout);
        param.put("userId", userId);

        return getSqlMapClientTemplate().update("MS-USER-UPDATE-USER-RETURN", param);
    }

	/**
	 *  Update DB table <tt>makeploy_user</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update makeploy_user set PASS_WORD=?, GMT_MODIFIED=CURRENT_TIMESTAMP where (CELL = ?)</tt>
	 *
	 *	@param passWord
	 *	@param cell
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int updatePass(String passWord, String cell) throws DataAccessException {
        Map<String,Object> param = new HashMap<String,Object>();

        param.put("passWord", passWord);
        param.put("cell", cell);

        return getSqlMapClientTemplate().update("MS-USER-UPDATE-PASS", param);
    }

	/**
	 *  Update DB table <tt>makeploy_user</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update makeploy_user set SHOP_ID=?, GMT_MODIFIED=CURRENT_TIMESTAMP where (USER_ID = ?)</tt>
	 *
	 *	@param shopId
	 *	@param userId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int addShopByUserId(String shopId, String userId) throws DataAccessException {
        Map<String,Object> param = new HashMap<String,Object>();

        param.put("shopId", shopId);
        param.put("userId", userId);

        return getSqlMapClientTemplate().update("MS-USER-ADD-SHOP-BY-USER-ID", param);
    }

	/**
	 *  Query DB table <tt>makeploy_user</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from makelploy_user</tt>
	 *
	 *	@param userId
	 *	@param cell
	 *	@param offset
	 *	@param limit
	 *	@return List<UserDO>
	 *	@throws DataAccessException
	 */	 
    public List<UserDO> selectByUserIDAndCell(String userId, String cell, Integer offset, Integer limit) throws DataAccessException {

	Map<String,Object> param = new HashMap<String,Object>();

        param.put("userId", userId);
        param.put("cell", cell);
        param.put("offset", offset);
        param.put("limit", limit);

        return getSqlMapClientTemplate().queryForList("MS-USER-SELECT-BY-USER-ID-AND-CELL", param);

    }

	/**
	 *  Update DB table <tt>makeploy_user</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update makeploy_user set HIGH_USER_ID=?, GMT_MODIFIED=CURRENT_TIMESTAMP where (USER_ID = ?)</tt>
	 *
	 *	@param highUserId
	 *	@param userId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int updateHighByUserId(String highUserId, String userId) throws DataAccessException {
        Map<String,Object> param = new HashMap<String,Object>();

        param.put("highUserId", highUserId);
        param.put("userId", userId);

        return getSqlMapClientTemplate().update("MS-USER-UPDATE-HIGH-BY-USER-ID", param);
    }

	/**
	 *  Update DB table <tt>makeploy_user</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update makeploy_user set HIGH_USER_ID=?, CERT_TYPE='1', GMT_MODIFIED=CURRENT_TIMESTAMP where (USER_ID = ?)</tt>
	 *
	 *	@param highUserId
	 *	@param userId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int sethightestUser(String highUserId, String userId) throws DataAccessException {
        Map<String,Object> param = new HashMap<String,Object>();

        param.put("highUserId", highUserId);
        param.put("userId", userId);

        return getSqlMapClientTemplate().update("MS-USER-SETHIGHTEST-USER", param);
    }

	/**
	 *  Update DB table <tt>makeploy_user</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update makeploy_user set BALANCE=?, TOTAL_BALANCE=?, GMT_MODIFIED=CURRENT_TIMESTAMP where (USER_ID = ?)</tt>
	 *
	 *	@param user
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int updateBalanceMoneyByUserId(UserDO user) throws DataAccessException {
    	if (user == null) {
    		throw new IllegalArgumentException("Can't update by a null data object.");
    	}


        return getSqlMapClientTemplate().update("MS-USER-UPDATE-BALANCE-MONEY-BY-USER-ID", user);
    }

	/**
	 *  Query DB table <tt>makeploy_user</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from makeploy_user</tt>
	 *
	 *	@param shopId
	 *	@return UserDO
	 *	@throws DataAccessException
	 */	 
    public UserDO selectUserInfoByShopId(String shopId) throws DataAccessException {

	Map<String,Object> param = new HashMap<String,Object>();

        param.put("shopId", shopId);

        return (UserDO) getSqlMapClientTemplate().queryForObject("MS-USER-SELECT-USER-INFO-BY-SHOP-ID", param);

    }

	/**
	 *  Query DB table <tt>makeploy_user</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from makeploy_user</tt>
	 *
	 *	@param commerceId
	 *	@param startRow
	 *	@param pageSize
	 *	@return List<UserDO>
	 *	@throws DataAccessException
	 */	 
    public List<UserDO> searchCommerceUser(String commerceId, Integer startRow, Integer pageSize) throws DataAccessException {

	Map<String,Object> param = new HashMap<String,Object>();

        param.put("commerceId", commerceId);
        param.put("startRow", startRow);
        param.put("pageSize", pageSize);

        return getSqlMapClientTemplate().queryForList("MS-USER-SEARCH-COMMERCE-USER", param);

    }

	/**
	 *  Query DB table <tt>makeploy_user</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from makeploy_user</tt>
	 *
	 *	@param commerceId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int searchCommerceUserCount(String commerceId) throws DataAccessException {

	Map<String,Object> param = new HashMap<String,Object>();

        param.put("commerceId", commerceId);

	    Integer retObj = (Integer) getSqlMapClientTemplate().queryForObject("MS-USER-SEARCH-COMMERCE-USER-COUNT", param);

		if (retObj == null) {
		    return 0;
		} else {
		    return retObj.intValue();
		}

    }

	/**
	 *  Update DB table <tt>makeploy_user</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update makeploy_user set COMMERCE_ID=?, GMT_MODIFIED=CURRENT_TIMESTAMP where (USER_ID = ?)</tt>
	 *
	 *	@param commerceId
	 *	@param userId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int updateUserCommerce(String commerceId, String userId) throws DataAccessException {
        Map<String,Object> param = new HashMap<String,Object>();

        param.put("commerceId", commerceId);
        param.put("userId", userId);

        return getSqlMapClientTemplate().update("MS-USER-UPDATE-USER-COMMERCE", param);
    }

}
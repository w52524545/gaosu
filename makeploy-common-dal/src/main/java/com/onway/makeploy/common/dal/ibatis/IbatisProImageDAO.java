/**
 * yingyinglicai.com Inc.
 * Copyright (c) 2013-2014 All Rights Reserved.
 */
 package com.onway.makeploy.common.dal.ibatis;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;

import com.onway.makeploy.common.dal.daointerface.ProImageDAO;

import com.onway.makeploy.common.dal.dataobject.ProImageDO;
import org.springframework.dao.DataAccessException;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/**
 * An ibatis based implementation of dao interface <tt>com.onway.makeploy.common.dal.daointerface.ProImageDAO</tt>.
 *
 * This file is generated by <tt>onway-gen-dal</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>onway</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/makeploy_pro_image.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>onway-gen-dal</tt> 
 * to generate this file.
 *
 * @author guangdong.li
 * @version $Id: IbatisProImageDAO.java,v 1.0 2013/10/29 07:34:20 guangdong.li Exp $
 */
public class IbatisProImageDAO extends SqlMapClientDaoSupport implements ProImageDAO {
	/**
	 *  Insert one <tt>ProImageDO</tt> object to DB table <tt>makeploy_pro_image</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into makeploy_pro_image(SHOP_ID,PRODUCT_NO,FLAG,IMG,CREATER,GMT_CREATE,MODIFIER,GMT_MODIFIED,MEMO) values (?, ?, ?, ?, ?, CURRENT_TIMESTAMP, ?, CURRENT_TIMESTAMP, ?)</tt>
	 *
	 *	@param proImage
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int insert(ProImageDO proImage) throws DataAccessException {
    	if (proImage == null) {
    		throw new IllegalArgumentException("Can't insert a null data object into db.");
    	}
    	
        getSqlMapClientTemplate().insert("MS-PRO-IMAGE-INSERT", proImage);

        return proImage.getId();
    }

	/**
	 *  Query DB table <tt>makeploy_pro_image</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from makeploy_pro_image</tt>
	 *
	 *	@param shopId
	 *	@param productNo
	 *	@param flag
	 *	@return List<ProImageDO>
	 *	@throws DataAccessException
	 */	 
    public List<ProImageDO> selectProImageByProShopid(String shopId, String productNo, String flag) throws DataAccessException {

	Map<String,Object> param = new HashMap<String,Object>();

        param.put("shopId", shopId);
        param.put("productNo", productNo);
        param.put("flag", flag);

        return getSqlMapClientTemplate().queryForList("MS-PRO-IMAGE-SELECT-PRO-IMAGE-BY-PRO-SHOPID", param);

    }

	/**
	 *  Update DB table <tt>makeploy_pro_image</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update makeploy_pro_image set IMG=?, GMT_MODIFIED=CURRENT_TIMESTAMP where ((SHOP_ID = ?) AND (PRODUCT_NO = ?) AND (FLAG = ?))</tt>
	 *
	 *	@param img
	 *	@param shopId
	 *	@param productNo
	 *	@param flag
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int updateProImageByProShopid(String img, String shopId, String productNo, String flag) throws DataAccessException {
        Map<String,Object> param = new HashMap<String,Object>();

        param.put("img", img);
        param.put("shopId", shopId);
        param.put("productNo", productNo);
        param.put("flag", flag);

        return getSqlMapClientTemplate().update("MS-PRO-IMAGE-UPDATE-PRO-IMAGE-BY-PRO-SHOPID", param);
    }

	/**
	 *  Query DB table <tt>makeploy_pro_image</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from makeploy_pro_image</tt>
	 *
	 *	@param productNo
	 *	@param shopId
	 *	@return List<ProImageDO>
	 *	@throws DataAccessException
	 */	 
    public List<ProImageDO> selectAllProImage(String productNo, String shopId) throws DataAccessException {

	Map<String,Object> param = new HashMap<String,Object>();

        param.put("productNo", productNo);
        param.put("shopId", shopId);

        return getSqlMapClientTemplate().queryForList("MS-PRO-IMAGE-SELECT-ALL-PRO-IMAGE", param);

    }

	/**
	 *  Insert one <tt>ProImageDO</tt> object to DB table <tt>makeploy_pro_image</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into makeploy_pro_image(ID,SHOP_ID,PRODUCT_NO,FLAG,IMG,CREATER,GMT_CREATE,MODIFIER,GMT_MODIFIED,MEMO) values (?, ?, ?, ?, ?, ?, CURRENT_TIMESTAMP, ?, CURRENT_TIMESTAMP, ?)</tt>
	 *
	 *	@param proImage
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int addPartnerImage(ProImageDO proImage) throws DataAccessException {
    	if (proImage == null) {
    		throw new IllegalArgumentException("Can't insert a null data object into db.");
    	}
    	
        getSqlMapClientTemplate().insert("MS-PRO-IMAGE-ADD-PARTNER-IMAGE", proImage);

        return proImage.getId();
    }

	/**
	 *  Delete records from DB table <tt>makeploy_pro_image</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from makeploy_pro_image where ((SHOP_ID = ?) AND (PRODUCT_NO = ?))</tt>
	 *
	 *	@param shopId
	 *	@param productNo
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteProimage(String shopId, String productNo) throws DataAccessException {
        Map<String,Object> param = new HashMap<String,Object>();

        param.put("shopId", shopId);
        param.put("productNo", productNo);

        return getSqlMapClientTemplate().delete("MS-PRO-IMAGE-DELETE-PROIMAGE", param);
    }

}
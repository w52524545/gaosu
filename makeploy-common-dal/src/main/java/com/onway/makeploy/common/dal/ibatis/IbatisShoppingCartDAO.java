/**
 * yingyinglicai.com Inc.
 * Copyright (c) 2013-2014 All Rights Reserved.
 */
 package com.onway.makeploy.common.dal.ibatis;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;

import com.onway.makeploy.common.dal.daointerface.ShoppingCartDAO;

import com.onway.makeploy.common.dal.dataobject.ShoppingCartDO;
import java.util.List;
import org.springframework.dao.DataAccessException;
import java.util.Map;
import java.util.HashMap;

/**
 * An ibatis based implementation of dao interface <tt>com.onway.makeploy.common.dal.daointerface.ShoppingCartDAO</tt>.
 *
 * This file is generated by <tt>onway-gen-dal</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>onway</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/makeploy_shopping_cart.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>onway-gen-dal</tt> 
 * to generate this file.
 *
 * @author guangdong.li
 * @version $Id: IbatisShoppingCartDAO.java,v 1.0 2013/10/29 07:34:20 guangdong.li Exp $
 */
public class IbatisShoppingCartDAO extends SqlMapClientDaoSupport implements ShoppingCartDAO {
	/**
	 *  Query DB table <tt>makeploy_shopping_cart</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from makeploy_shopping_cart</tt>
	 *
	 *	@param userId
	 *	@param startRow
	 *	@param pageSize
	 *	@return List<ShoppingCartDO>
	 *	@throws DataAccessException
	 */	 
    public List<ShoppingCartDO> selectShoppingCartByUserId(String userId, Integer startRow, Integer pageSize) throws DataAccessException {

	Map<String,Object> param = new HashMap<String,Object>();

        param.put("userId", userId);
        param.put("startRow", startRow);
        param.put("pageSize", pageSize);

        return getSqlMapClientTemplate().queryForList("MS-SHOPPING-CART-SELECT-SHOPPING-CART-BY-USER-ID", param);

    }

	/**
	 *  Query DB table <tt>makeploy_shopping_cart</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from makeploy_shopping_cart</tt>
	 *
	 *	@param userId
	 *	@param productNo
	 *	@param shopId
	 *	@return ShoppingCartDO
	 *	@throws DataAccessException
	 */	 
    public ShoppingCartDO selectShoppingCartByUserIdAndProductNoAndShopId(String userId, String productNo, String shopId) throws DataAccessException {

	Map<String,Object> param = new HashMap<String,Object>();

        param.put("userId", userId);
        param.put("productNo", productNo);
        param.put("shopId", shopId);

        return (ShoppingCartDO) getSqlMapClientTemplate().queryForObject("MS-SHOPPING-CART-SELECT-SHOPPING-CART-BY-USER-ID-AND-PRODUCT-NO-AND-SHOP-ID", param);

    }

	/**
	 *  Query DB table <tt>makeploy_shopping_cart</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from makeploy_shopping_cart</tt>
	 *
	 *	@param userId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int selectShoppingCartCountByUserId(String userId) throws DataAccessException {

	Map<String,Object> param = new HashMap<String,Object>();

        param.put("userId", userId);

	    Integer retObj = (Integer) getSqlMapClientTemplate().queryForObject("MS-SHOPPING-CART-SELECT-SHOPPING-CART-COUNT-BY-USER-ID", param);

		if (retObj == null) {
		    return 0;
		} else {
		    return retObj.intValue();
		}

    }

	/**
	 *  Update DB table <tt>makeploy_shopping_cart</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update makeploy_shopping_cart set PRODUCT_COUNT=?, GMT_MODIFIED=CURRENT_TIMESTAMP where ((PRODUCT_NO = ?) AND (USER_ID = ?) AND (SHOP_ID = ?) AND (DEL_FLG = 0))</tt>
	 *
	 *	@param shoppingCart
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int updateShoppingCartInfo(ShoppingCartDO shoppingCart) throws DataAccessException {
    	if (shoppingCart == null) {
    		throw new IllegalArgumentException("Can't update by a null data object.");
    	}


        return getSqlMapClientTemplate().update("MS-SHOPPING-CART-UPDATE-SHOPPING-CART-INFO", shoppingCart);
    }

	/**
	 *  Update DB table <tt>makeploy_shopping_cart</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update makeploy_shopping_cart set DEL_FLG=1, GMT_MODIFIED=CURRENT_TIMESTAMP where ((PRODUCT_NO = ?) AND (USER_ID = ?) AND (SHOP_ID = ?))</tt>
	 *
	 *	@param shoppingCart
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteShoppingCartInfo(ShoppingCartDO shoppingCart) throws DataAccessException {
    	if (shoppingCart == null) {
    		throw new IllegalArgumentException("Can't update by a null data object.");
    	}


        return getSqlMapClientTemplate().update("MS-SHOPPING-CART-DELETE-SHOPPING-CART-INFO", shoppingCart);
    }

	/**
	 *  Insert one <tt>ShoppingCartDO</tt> object to DB table <tt>makeploy_shopping_cart</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into makeploy_shopping_cart(ID,USER_ID,PRODUCT_NO,SHOP_ID,PRICE,PRODUCT_COUNT,DEL_FLG,CREATER,GMT_CREATE,MODIFIER,GMT_MODIFIED,MEMO) values (?, ?, ?, ?, ?, ?, 0, ?, CURRENT_TIMESTAMP, ?, CURRENT_TIMESTAMP, ?)</tt>
	 *
	 *	@param shoppingCart
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int addShoppingCart(ShoppingCartDO shoppingCart) throws DataAccessException {
    	if (shoppingCart == null) {
    		throw new IllegalArgumentException("Can't insert a null data object into db.");
    	}
    	
        getSqlMapClientTemplate().insert("MS-SHOPPING-CART-ADD-SHOPPING-CART", shoppingCart);

        return shoppingCart.getId();
    }

}